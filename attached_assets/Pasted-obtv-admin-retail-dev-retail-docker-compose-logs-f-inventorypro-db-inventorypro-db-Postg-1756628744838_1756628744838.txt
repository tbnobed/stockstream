obtv-admin@retail-dev:~/retail$ docker compose logs -f
inventorypro-db  |
inventorypro-db  | PostgreSQL Database directory appears to contain a database; Skipping initialization
inventorypro-db  |
inventorypro-db  | 2025-08-31 08:24:26.302 UTC [1] LOG:  starting PostgreSQL 15.14 on x86_64-pc-linux-musl, compiled by gcc (Alpine 14.2.0) 14.2.0, 64-bit
inventorypro-app  | üöÄ Starting InventoryPro application...
inventorypro-db   | 2025-08-31 08:24:26.302 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
inventorypro-db   | 2025-08-31 08:24:26.302 UTC [1] LOG:  listening on IPv6 address "::", port 5432
inventorypro-app  | üìã Auto-applying production database fixes...
inventorypro-app  | ‚è≥ Waiting for database connection...
inventorypro-app  | ‚úÖ Database connection established
inventorypro-app  | üìä Checking database schema...
inventorypro-app  | ‚úÖ Database already initialized
inventorypro-app  | üîÑ Applying production constraint fixes...
inventorypro-app  | ERROR:  syntax error at or near "group"
inventorypro-app  | LINE 207:         ALTER TABLE inventory_items ADD COLUMN group TEXT;
inventorypro-app  |                                                          ^
inventorypro-db   | 2025-08-31 08:24:26.303 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
inventorypro-db   | 2025-08-31 08:24:26.306 UTC [29] LOG:  database system was shut down at 2025-08-31 08:21:48 UTC
inventorypro-db   | 2025-08-31 08:24:26.314 UTC [1] LOG:  database system is ready to accept connections
inventorypro-db   | 2025-08-31 08:24:32.000 UTC [42] ERROR:  syntax error at or near "group" at character 7893
inventorypro-db   | 2025-08-31 08:24:32.000 UTC [42] STATEMENT:
inventorypro-db   |     DO $$
inventorypro-db   |     BEGIN
inventorypro-db   |         -- 0. Ensure sessions table exists (for authentication)
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.tables
inventorypro-db   |             WHERE table_name = 'sessions'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             CREATE TABLE sessions (
inventorypro-app  | ‚ö†Ô∏è  Constraint and schema configuration completed with warnings
inventorypro-app  | üîç Performing final health check...
inventorypro-app  | ‚úÖ Database health check passed
inventorypro-app  | üåê Starting application server...
inventorypro-app  | Email service disabled: Missing environment variables: SMTP_HOST, SMTP_USER, SMTP_PASS
inventorypro-app  | 8:24:33 AM [express] serving on port 5000
inventorypro-app  | 8:24:39 AM [express] GET /api/auth/user 304 in 56ms :: {"id":"fa4e71dc-9993-48c9-9589-85f9232ec1f2",‚Ä¶
inventorypro-app  | 8:24:39 AM [express] GET /api/suppliers 304 in 10ms :: []
inventorypro-app  | 8:24:39 AM [express] GET /api/categories/color 500 in 26ms :: {"message":"Failed to fetch categories‚Ä¶
inventorypro-app  | 8:24:39 AM [express] GET /api/categories/category 500 in 27ms :: {"message":"Failed to fetch categor‚Ä¶
inventorypro-app  | 8:24:40 AM [express] GET /api/associates 304 in 91ms :: [{"id":"069e0c99-e930-45c6-9a9a-e12c143e521f‚Ä¶
inventorypro-app  | 8:24:40 AM [express] GET /api/categories/size 500 in 89ms :: {"message":"Failed to fetch categories ‚Ä¶
inventorypro-app  | 8:24:40 AM [express] GET /api/categories/design 500 in 83ms :: {"message":"Failed to fetch categorie‚Ä¶
inventorypro-app  | 8:24:40 AM [express] GET /api/inventory 500 in 22ms :: {"message":"Failed to fetch inventory items"}
inventorypro-app  | 8:24:40 AM [express] GET /api/categories/style 500 in 82ms :: {"message":"Failed to fetch categories‚Ä¶
inventorypro-app  | 8:24:40 AM [express] GET /api/sales 500 in 18ms :: {"message":"Failed to fetch sales"}
inventorypro-app  | 8:24:40 AM [express] GET /api/categories/group 500 in 94ms :: {"message":"Failed to fetch categories‚Ä¶
inventorypro-app  | 8:24:40 AM [express] GET /api/inventory/low-stock 500 in 11ms :: {"message":"Failed to fetch low sto‚Ä¶
inventorypro-app  | 8:24:40 AM [express] GET /api/dashboard/stats 304 in 29ms :: {"totalRevenue":250,"totalProfit":200,"‚Ä¶
inventorypro-db   |                 sid VARCHAR PRIMARY KEY,
inventorypro-db   |                 sess JSONB NOT NULL,
inventorypro-db   |                 expire TIMESTAMP NOT NULL
inventorypro-db   |             );
inventorypro-db   |             CREATE INDEX IDX_session_expire ON sessions(expire);
inventorypro-db   |             RAISE NOTICE 'Created missing sessions table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 0a. Ensure categories table exists with complete schema
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.tables
inventorypro-db   |             WHERE table_name = 'categories'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             CREATE TABLE categories (
inventorypro-db   |                 id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
inventorypro-db   |                 type VARCHAR NOT NULL,
inventorypro-db   |                 value VARCHAR NOT NULL,
inventorypro-db   |                 abbreviation VARCHAR(10),
inventorypro-db   |                 parent_category VARCHAR,
inventorypro-db   |                 display_order INTEGER DEFAULT 0,
inventorypro-db   |                 is_active BOOLEAN DEFAULT true,
inventorypro-db   |                 created_at TIMESTAMP DEFAULT NOW(),
inventorypro-db   |                 updated_at TIMESTAMP DEFAULT NOW()
inventorypro-db   |             );
inventorypro-db   |             RAISE NOTICE 'Created missing categories table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 0b. Add new category fields if they don't exist
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'categories'
inventorypro-db   |             AND column_name = 'abbreviation'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE categories ADD COLUMN abbreviation VARCHAR(10);
inventorypro-db   |             RAISE NOTICE 'Added abbreviation column to categories';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'categories'
inventorypro-db   |             AND column_name = 'parent_category'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE categories ADD COLUMN parent_category VARCHAR;
inventorypro-db   |             RAISE NOTICE 'Added parent_category column to categories';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 0c. Ensure inventory_transactions table exists
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.tables
inventorypro-db   |             WHERE table_name = 'inventory_transactions'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             CREATE TABLE inventory_transactions (
inventorypro-db   |                 id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
inventorypro-db   |                 item_id UUID NOT NULL REFERENCES inventory_items(id),
inventorypro-db   |                 transaction_type TEXT NOT NULL,
inventorypro-db   |                 quantity INTEGER NOT NULL,
inventorypro-db   |                 reason TEXT,
inventorypro-db   |                 notes TEXT,
inventorypro-db   |                 user_id UUID REFERENCES users(id),
inventorypro-db   |                 created_at TIMESTAMP DEFAULT NOW()
inventorypro-db   |             );
inventorypro-db   |             RAISE NOTICE 'Created missing inventory_transactions table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 0a. Ensure media_files table exists (for logo library functionality)
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.tables
inventorypro-db   |             WHERE table_name = 'media_files'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             CREATE TABLE media_files (
inventorypro-db   |                 id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
inventorypro-db   |                 file_name TEXT NOT NULL,
inventorypro-db   |                 original_name TEXT NOT NULL,
inventorypro-db   |                 file_type TEXT NOT NULL,
inventorypro-db   |                 file_size INTEGER NOT NULL,
inventorypro-db   |                 object_path TEXT NOT NULL,
inventorypro-db   |                 category TEXT DEFAULT 'logo',
inventorypro-db   |                 uploaded_by UUID REFERENCES users(id),
inventorypro-db   |                 is_active BOOLEAN DEFAULT true,
inventorypro-db   |                 created_at TIMESTAMP DEFAULT NOW()
inventorypro-db   |             );
inventorypro-db   |             RAISE NOTICE 'Created missing media_files table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 0b. Ensure label_templates table exists (for label template persistence)
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.tables
inventorypro-db   |             WHERE table_name = 'label_templates'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             CREATE TABLE label_templates (
inventorypro-db   |                 id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
inventorypro-db   |                 user_id UUID NOT NULL REFERENCES users(id),
inventorypro-db   |                 name TEXT NOT NULL DEFAULT 'Default Template',
inventorypro-db   |                 is_default BOOLEAN DEFAULT false,
inventorypro-db   |                 selected_inventory_id UUID REFERENCES inventory_items(id),
inventorypro-db   |                 product_name TEXT DEFAULT 'Product Name',
inventorypro-db   |                 product_code TEXT DEFAULT 'PRD-001',
inventorypro-db   |                 price TEXT DEFAULT '25.00',
inventorypro-db   |                 qr_content TEXT DEFAULT 'PRD-001',
inventorypro-db   |                 custom_message TEXT DEFAULT 'Thank you for your purchase',
inventorypro-db   |                 size_indicator TEXT DEFAULT 'M',
inventorypro-db   |                 logo_url TEXT DEFAULT '',
inventorypro-db   |                 show_qr BOOLEAN DEFAULT true,
inventorypro-db   |                 show_logo BOOLEAN DEFAULT false,
inventorypro-db   |                 show_price BOOLEAN DEFAULT true,
inventorypro-db   |                 show_message BOOLEAN DEFAULT true,
inventorypro-db   |                 show_size BOOLEAN DEFAULT true,
inventorypro-db   |                 layout_positions TEXT,
inventorypro-db   |                 created_at TIMESTAMP DEFAULT NOW(),
inventorypro-db   |                 updated_at TIMESTAMP DEFAULT NOW()
inventorypro-db   |             );
inventorypro-db   |             RAISE NOTICE 'Created missing label_templates table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 1. Ensure all users have corresponding sales_associate records
inventorypro-db   |         INSERT INTO sales_associates (id, name, email, user_id, is_active, created_at)
inventorypro-db   |         SELECT u.id,
inventorypro-db   |                COALESCE(
inventorypro-db   |                    NULLIF(TRIM(u.first_name || ' ' || u.last_name), ''),
inventorypro-db   |                    u.username
inventorypro-db   |                ) as name,
inventorypro-db   |                COALESCE(u.email, u.username || '@inventorypro.com') as email,
inventorypro-db   |                u.id,
inventorypro-db   |                COALESCE(u.is_active, true),
inventorypro-db   |                NOW()
inventorypro-db   |         FROM users u
inventorypro-db   |         WHERE NOT EXISTS (SELECT 1 FROM sales_associates sa WHERE sa.id = u.id)
inventorypro-db   |         ON CONFLICT (id) DO NOTHING;
inventorypro-db   |
inventorypro-db   |         -- 2. Remove unique constraint on order_number for multi-item transactions
inventorypro-db   |         -- Check if unique constraint exists and drop it
inventorypro-db   |         IF EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.table_constraints
inventorypro-db   |             WHERE constraint_name = 'sales_order_number_unique'
inventorypro-db   |             AND table_name = 'sales'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE sales DROP CONSTRAINT sales_order_number_unique;
inventorypro-db   |             RAISE NOTICE 'Dropped unique constraint: sales_order_number_unique';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- Also check for any unique index on order_number and drop it
inventorypro-db   |         IF EXISTS (
inventorypro-db   |             SELECT 1 FROM pg_indexes
inventorypro-db   |             WHERE indexname = 'sales_order_number_unique'
inventorypro-db   |             AND tablename = 'sales'
inventorypro-db   |             AND schemaname = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             DROP INDEX sales_order_number_unique;
inventorypro-db   |             RAISE NOTICE 'Dropped unique index: sales_order_number_unique';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- Check for any other unique constraints on order_number column
inventorypro-db   |         DECLARE
inventorypro-db   |             constraint_rec RECORD;
inventorypro-db   |         BEGIN
inventorypro-db   |             FOR constraint_rec IN
inventorypro-db   |                 SELECT pc.conname
inventorypro-db   |                 FROM pg_constraint pc
inventorypro-db   |                 JOIN pg_class pgc ON pc.conrelid = pgc.oid
inventorypro-db   |                 JOIN pg_attribute pa ON pc.conrelid = pa.attrelid AND pa.attnum = ANY(pc.conkey)
inventorypro-db   |                 JOIN pg_namespace pn ON pgc.relnamespace = pn.oid
inventorypro-db   |                 WHERE pgc.relname = 'sales'
inventorypro-db   |                 AND pa.attname = 'order_number'
inventorypro-db   |                 AND pc.contype = 'u'
inventorypro-db   |                 AND pn.nspname = 'public'
inventorypro-db   |             LOOP
inventorypro-db   |                 EXECUTE 'ALTER TABLE sales DROP CONSTRAINT ' || constraint_rec.conname;
inventorypro-db   |                 RAISE NOTICE 'Dropped additional constraint: %', constraint_rec.conname;
inventorypro-db   |             END LOOP;
inventorypro-db   |         END;
inventorypro-db   |
inventorypro-db   |         -- 3. Add new category fields to inventory_items if they don't exist
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'design'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE inventory_items ADD COLUMN design TEXT;
inventorypro-db   |             RAISE NOTICE 'Added design column to inventory_items';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- Updated field names: group and style instead of group_type and style_group
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'group'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE inventory_items ADD COLUMN group TEXT;
inventorypro-db   |             RAISE NOTICE 'Added group column to inventory_items';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'style'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE inventory_items ADD COLUMN style TEXT;
inventorypro-db   |             RAISE NOTICE 'Added style column to inventory_items';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- Migrate data from old field names to new ones if old columns exist
inventorypro-db   |         IF EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'group_type'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             UPDATE inventory_items SET group = group_type WHERE group IS NULL AND group_type IS NOT NULL;
inventorypro-db   |             RAISE NOTICE 'Migrated group_type data to group column';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         IF EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'style_group'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             UPDATE inventory_items SET style = style_group WHERE style IS NULL AND style_group IS NOT NULL;
inventorypro-db   |             RAISE NOTICE 'Migrated style_group data to style column';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 4. Add is_active field for archive functionality
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'is_active'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE inventory_items ADD COLUMN is_active BOOLEAN DEFAULT true;
inventorypro-db   |             RAISE NOTICE 'Added is_active column to inventory_items';
inventorypro-db   |
inventorypro-db   |             -- Set all existing items as active
inventorypro-db   |             UPDATE inventory_items SET is_active = true WHERE is_active IS NULL;
inventorypro-db   |             RAISE NOTICE 'Set all existing inventory items as active';
inventorypro-db   |         ELSE
inventorypro-db   |             -- Ensure existing items without is_active set are marked as active
inventorypro-db   |             UPDATE inventory_items SET is_active = true WHERE is_active IS NULL;
inventorypro-db   |             RAISE NOTICE 'Ensured all inventory items have is_active set';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 5. Add customer email fields to sales table for email receipts
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'sales'
inventorypro-db   |             AND column_name = 'customer_name'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE sales ADD COLUMN customer_name TEXT;
inventorypro-db   |             RAISE NOTICE 'Added customer_name column to sales table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'sales'
inventorypro-db   |             AND column_name = 'customer_email'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE sales ADD COLUMN customer_email TEXT;
inventorypro-db   |             RAISE NOTICE 'Added customer_email column to sales table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 6. Add receipt fields to sales table for QR code receipt functionality
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'sales'
inventorypro-db   |             AND column_name = 'receipt_token'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE sales ADD COLUMN receipt_token VARCHAR(50);
inventorypro-db   |             RAISE NOTICE 'Added receipt_token column to sales table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'sales'
inventorypro-db   |             AND column_name = 'receipt_expires_at'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE sales ADD COLUMN receipt_expires_at TIMESTAMP;
inventorypro-db   |             RAISE NOTICE 'Added receipt_expires_at column to sales table';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 7. Fix category display orders to be sequential (only if categories table exists)
inventorypro-db   |         IF EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.tables
inventorypro-db   |             WHERE table_name = 'categories'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             WITH ordered_categories AS (
inventorypro-db   |                 SELECT
inventorypro-db   |                     id,
inventorypro-db   |                     type,
inventorypro-db   |                     ROW_NUMBER() OVER (PARTITION BY type ORDER BY display_order, value) - 1 AS new_display_order
inventorypro-db   |                 FROM categories
inventorypro-db   |                 WHERE is_active = true
inventorypro-db   |             )
inventorypro-db   |             UPDATE categories
inventorypro-db   |             SET display_order = ordered_categories.new_display_order,
inventorypro-db   |                 updated_at = NOW()
inventorypro-db   |             FROM ordered_categories
inventorypro-db   |             WHERE categories.id = ordered_categories.id;
inventorypro-db   |             RAISE NOTICE 'Fixed category display orders to be sequential';
inventorypro-db   |         ELSE
inventorypro-db   |             RAISE NOTICE 'Categories table does not exist yet, skipping display order fix';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         RAISE NOTICE 'Production constraint fixes and schema updates applied successfully';
inventorypro-db   |     END $$;
inventorypro-db   |
inventorypro-db   | 2025-08-31 08:24:39.944 UTC [44] ERROR:  column "abbreviation" does not exist at character 31
inventorypro-db   | 2025-08-31 08:24:39.944 UTC [44] STATEMENT:  select "id", "type", "value", "abbreviation", "parent_category", "display_order", "is_active", "created_at", "updated_at" from "categories" where ("categories"."type" = $1 and "categories"."is_active" = $2) order by "categories"."display_order", "categories"."value"
inventorypro-db   | 2025-08-31 08:24:39.979 UTC [44] ERROR:  column "abbreviation" does not exist at character 31
inventorypro-db   | 2025-08-31 08:24:39.979 UTC [44] STATEMENT:  select "id", "type", "value", "abbreviation", "parent_category", "display_order", "is_active", "created_at", "updated_at" from "categories" where ("categories"."type" = $1 and "categories"."is_active" = $2) order by "categories"."display_order", "categories"."value"
inventorypro-db   | 2025-08-31 08:24:40.011 UTC [45] ERROR:  column "abbreviation" does not exist at character 31
inventorypro-db   | 2025-08-31 08:24:40.011 UTC [45] STATEMENT:  select "id", "type", "value", "abbreviation", "parent_category", "display_order", "is_active", "created_at", "updated_at" from "categories" where ("categories"."type" = $1 and "categories"."is_active" = $2) order by "categories"."display_order", "categories"."value"
inventorypro-db   | 2025-08-31 08:24:40.011 UTC [47] ERROR:  column "abbreviation" does not exist at character 31
inventorypro-db   | 2025-08-31 08:24:40.011 UTC [47] STATEMENT:  select "id", "type", "value", "abbreviation", "parent_category", "display_order", "is_active", "created_at", "updated_at" from "categories" where ("categories"."type" = $1 and "categories"."is_active" = $2) order by "categories"."display_order", "categories"."value"
inventorypro-db   | 2025-08-31 08:24:40.011 UTC [44] ERROR:  column inventory_items.category does not exist at character 116
inventorypro-db   | 2025-08-31 08:24:40.011 UTC [44] STATEMENT:  select "inventory_items"."id", "inventory_items"."sku", "inventory_items"."name", "inventory_items"."description", "inventory_items"."category", "inventory_items"."size", "inventory_items"."color", "inventory_items"."design", "inventory_items"."group", "inventory_items"."style", "inventory_items"."price", "inventory_items"."cost", "inventory_items"."quantity", "inventory_items"."min_stock_level", "inventory_items"."supplier_id", "inventory_items"."is_active", "inventory_items"."created_at", "inventory_items"."updated_at", "suppliers"."id", "suppliers"."name", "suppliers"."contact_info", "suppliers"."created_at" from "inventory_items" left join "suppliers" on "inventory_items"."supplier_id" = "suppliers"."id" where "inventory_items"."is_active" = $1 order by "inventory_items"."sku"
inventorypro-db   | 2025-08-31 08:24:40.024 UTC [45] ERROR:  column "abbreviation" does not exist at character 31
inventorypro-db   | 2025-08-31 08:24:40.024 UTC [45] STATEMENT:  select "id", "type", "value", "abbreviation", "parent_category", "display_order", "is_active", "created_at", "updated_at" from "categories" where ("categories"."type" = $1 and "categories"."is_active" = $2) order by "categories"."display_order", "categories"."value"
inventorypro-db   | 2025-08-31 08:24:40.027 UTC [44] ERROR:  column sales.customer_name does not exist at character 187
inventorypro-db   | 2025-08-31 08:24:40.027 UTC [44] STATEMENT:  select "sales"."id", "sales"."order_number", "sales"."item_id", "sales"."quantity", "sales"."unit_price", "sales"."total_amount", "sales"."payment_method", "sales"."sales_associate_id", "sales"."customer_name", "sales"."customer_email", "sales"."sale_date", "sales"."receipt_token", "sales"."receipt_expires_at", "inventory_items"."id", "inventory_items"."sku", "inventory_items"."name", "inventory_items"."description", "inventory_items"."category", "inventory_items"."size", "inventory_items"."color", "inventory_items"."design", "inventory_items"."group", "inventory_items"."style", "inventory_items"."price", "inventory_items"."cost", "inventory_items"."quantity", "inventory_items"."min_stock_level", "inventory_items"."supplier_id", "inventory_items"."is_active", "inventory_items"."created_at", "inventory_items"."updated_at", "sales_associates"."id", "sales_associates"."name", "sales_associates"."email", "sales_associates"."user_id", "sales_associates"."is_active", "sales_associates"."created_at" from "sales" inner join "inventory_items" on "sales"."item_id" = "inventory_items"."id" inner join "sales_associates" on "sales"."sales_associate_id" = "sales_associates"."id" order by "sales"."sale_date" desc
inventorypro-db   | 2025-08-31 08:24:40.029 UTC [49] ERROR:  column "abbreviation" does not exist at character 31
inventorypro-db   | 2025-08-31 08:24:40.029 UTC [49] STATEMENT:  select "id", "type", "value", "abbreviation", "parent_category", "display_order", "is_active", "created_at", "updated_at" from "categories" where ("categories"."type" = $1 and "categories"."is_active" = $2) order by "categories"."display_order", "categories"."value"
inventorypro-db   | 2025-08-31 08:24:40.037 UTC [44] ERROR:  column inventory_items.category does not exist at character 116
inventorypro-db   | 2025-08-31 08:24:40.037 UTC [44] STATEMENT:  select "inventory_items"."id", "inventory_items"."sku", "inventory_items"."name", "inventory_items"."description", "inventory_items"."category", "inventory_items"."size", "inventory_items"."color", "inventory_items"."design", "inventory_items"."group", "inventory_items"."style", "inventory_items"."price", "inventory_items"."cost", "inventory_items"."quantity", "inventory_items"."min_stock_level", "inventory_items"."supplier_id", "inventory_items"."is_active", "inventory_items"."created_at", "inventory_items"."updated_at", "suppliers"."id", "suppliers"."name", "suppliers"."contact_info", "suppliers"."created_at" from "inventory_items" left join "suppliers" on "inventory_items"."supplier_id" = "suppliers"."id" where ("inventory_items"."quantity" <= "inventory_items"."min_stock_level" and "inventory_items"."is_active" = $1) order by "inventory_items"."sku"