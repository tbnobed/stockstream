ERROR:  relation "categories" does not exist at character 198
inventorypro-db   | 2025-08-22 06:52:18.812 UTC [43] QUERY:  WITH ordered_categories AS (
inventorypro-db   |             SELECT
inventorypro-db   |                 id,
inventorypro-db   |                 type,
inventorypro-db   |                 ROW_NUMBER() OVER (PARTITION BY type ORDER BY display_order, value) - 1 AS new_display_order
inventorypro-db   |             FROM categories
inventorypro-db   |             WHERE is_active = true
inventorypro-db   |         )
inventorypro-db   |         UPDATE categories
inventorypro-db   |         SET display_order = ordered_categories.new_display_order,
inventorypro-db   |             updated_at = NOW()
inventorypro-db   |         FROM ordered_categories
inventorypro-db   |         WHERE categories.id = ordered_categories.id
inventorypro-db   | 2025-08-22 06:52:18.812 UTC [43] CONTEXT:  PL/pgSQL function inline_code_block line 112 at SQL statement
inventorypro-db   | 2025-08-22 06:52:18.812 UTC [43] STATEMENT:
inventorypro-db   |     DO $$
inventorypro-db   |     BEGIN
inventorypro-db   |         -- 1. Ensure all users have corresponding sales_associate records
inventorypro-db   |         INSERT INTO sales_associates (id, name, email, user_id, is_active, created_at)
inventorypro-db   |         SELECT u.id,
inventorypro-db   |                COALESCE(
inventorypro-db   |                    NULLIF(TRIM(u.first_name || ' ' || u.last_name), ''),
inventorypro-db   |                    u.username
inventorypro-db   |                ) as name,
inventorypro-db   |                COALESCE(u.email, u.username || '@inventorypro.com') as email,
inventorypro-db   |                u.id,
inventorypro-db   |                COALESCE(u.is_active, true),
inventorypro-db   |                NOW()
inventorypro-db   |         FROM users u
inventorypro-db   |         WHERE NOT EXISTS (SELECT 1 FROM sales_associates sa WHERE sa.id = u.id)
inventorypro-db   |         ON CONFLICT (id) DO NOTHING;
inventorypro-db   |
inventorypro-db   |         -- 2. Remove unique constraint on order_number for multi-item transactions
inventorypro-db   |         -- Check if unique constraint exists and drop it
inventorypro-db   |         IF EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.table_constraints
inventorypro-db   |             WHERE constraint_name = 'sales_order_number_unique'
inventorypro-db   |             AND table_name = 'sales'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE sales DROP CONSTRAINT sales_order_number_unique;
inventorypro-db   |             RAISE NOTICE 'Dropped unique constraint: sales_order_number_unique';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- Also check for any unique index on order_number and drop it
inventorypro-db   |         IF EXISTS (
inventorypro-db   |             SELECT 1 FROM pg_indexes
inventorypro-db   |             WHERE indexname = 'sales_order_number_unique'
inventorypro-db   |             AND tablename = 'sales'
inventorypro-db   |             AND schemaname = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             DROP INDEX sales_order_number_unique;
inventorypro-db   |             RAISE NOTICE 'Dropped unique index: sales_order_number_unique';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- Check for any other unique constraints on order_number column
inventorypro-db   |         DECLARE
inventorypro-db   |             constraint_rec RECORD;
inventorypro-db   |         BEGIN
inventorypro-db   |             FOR constraint_rec IN
inventorypro-db   |                 SELECT pc.conname
inventorypro-db   |                 FROM pg_constraint pc
inventorypro-db   |                 JOIN pg_class pgc ON pc.conrelid = pgc.oid
inventorypro-db   |                 JOIN pg_attribute pa ON pc.conrelid = pa.attrelid AND pa.attnum = ANY(pc.conkey)
inventorypro-db   |                 JOIN pg_namespace pn ON pgc.relnamespace = pn.oid
inventorypro-db   |                 WHERE pgc.relname = 'sales'
inventorypro-db   |                 AND pa.attname = 'order_number'
inventorypro-db   |                 AND pc.contype = 'u'
inventorypro-db   |                 AND pn.nspname = 'public'
inventorypro-db   |             LOOP
inventorypro-db   |                 EXECUTE 'ALTER TABLE sales DROP CONSTRAINT ' || constraint_rec.conname;
inventorypro-db   |                 RAISE NOTICE 'Dropped additional constraint: %', constraint_rec.conname;
inventorypro-db   |             END LOOP;
inventorypro-db   |         END;
inventorypro-db   |
inventorypro-db   |         -- 3. Add new category fields to inventory_items if they don't exist
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'design'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE inventory_items ADD COLUMN design TEXT;
inventorypro-db   |             RAISE NOTICE 'Added design column to inventory_items';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'group_type'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE inventory_items ADD COLUMN group_type TEXT;
inventorypro-db   |             RAISE NOTICE 'Added group_type column to inventory_items';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'style_group'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE inventory_items ADD COLUMN style_group TEXT;
inventorypro-db   |             RAISE NOTICE 'Added style_group column to inventory_items';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 4. Add is_active field for archive functionality
inventorypro-db   |         IF NOT EXISTS (
inventorypro-db   |             SELECT 1 FROM information_schema.columns
inventorypro-db   |             WHERE table_name = 'inventory_items'
inventorypro-db   |             AND column_name = 'is_active'
inventorypro-db   |             AND table_schema = 'public'
inventorypro-db   |         ) THEN
inventorypro-db   |             ALTER TABLE inventory_items ADD COLUMN is_active BOOLEAN DEFAULT true;
inventorypro-db   |             RAISE NOTICE 'Added is_active column to inventory_items';
inventorypro-db   |
inventorypro-db   |             -- Set all existing items as active
inventorypro-db   |             UPDATE inventory_items SET is_active = true WHERE is_active IS NULL;
inventorypro-db   |             RAISE NOTICE 'Set all existing inventory items as active';
inventorypro-db   |         ELSE
inventorypro-db   |             -- Ensure existing items without is_active set are marked as active
inventorypro-db   |             UPDATE inventory_items SET is_active = true WHERE is_active IS NULL;
inventorypro-db   |             RAISE NOTICE 'Ensured all inventory items have is_active set';
inventorypro-db   |         END IF;
inventorypro-db   |
inventorypro-db   |         -- 5. Fix category display orders to be sequential
inventorypro-db   |         WITH ordered_categories AS (
inventorypro-db   |             SELECT
inventorypro-db   |                 id,
inventorypro-db   |                 type,
inventorypro-db   |                 ROW_NUMBER() OVER (PARTITION BY type ORDER BY display_order, value) - 1 AS new_display_order
inventorypro-db   |             FROM categories
inventorypro-db   |             WHERE is_active = true
inventorypro-db   |         )
inventorypro-db   |         UPDATE categories
inventorypro-db   |         SET display_order = ordered_categories.new_display_order,
inventorypro-db   |             updated_at = NOW()
inventorypro-db   |         FROM ordered_categories
inventorypro-db   |         WHERE categories.id = ordered_categories.id;
inventorypro-db   |         RAISE NOTICE 'Fixed category display orders to be sequential';
inventorypro-db   |
inventorypro-db   |         RAISE NOTICE 'Production constraint fixes and schema updates applied successfully';
inventorypro-db   |     END $$;
inventorypro-db   |