# InventoryPro Docker Compose Configuration
# Production-ready setup with PostgreSQL database and automated initialization

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inventorypro-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-inventorypro}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SecurePassword2025!}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-inventorypro}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # InventoryPro Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventorypro-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-SecurePassword2025!}@postgres:5432/${POSTGRES_DB:-inventorypro}
      SESSION_SECRET: ${SESSION_SECRET:-your_very_long_random_session_secret_key_here_change_in_production}
      PORT: 5000
    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  default:
    driver: bridge